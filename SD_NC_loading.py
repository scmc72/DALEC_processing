# functions to load and plot netCDF data generated by acolite processor (currently using for planet data)
# note: some functions might not be fully tested yet... I cannae remember where I got up to with these...
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import dalecLoad
import spectralConv
import SD_raster_loading

def getclosest_ij(lats, lons, latpt, lonpt):
    '''
    a function to find the index of the point closest pt
    (in squared distance) to give lat/lon value.
    '''
    # find squared distance of every point on grid
    dist_sq = (lats-latpt)**2 + (lons-lonpt)**2
    # 1D index of minimum dist_sq element
    minindex_flattened = dist_sq.argmin()
    # Get 2D index for latvals and lonvals arrays from 1D index
    return np.unravel_index(minindex_flattened, lats.shape)


def get_SD_NC_Spectra(NC_file, lat_pt, lon_pt):
    '''
    function to extract surface reflectance spectra from a superdoves NetCDF file at a given lat_pt, lon_pt coordinate
    
    to load ncdf file do this: netCDF4.Dataset(directory+file)
    '''
    lat, lon = NC_file.variables['lat'][:], NC_file.variables['lon'][:]
    iy, ix = getclosest_ij(lat, lon, lat_pt, lon_pt)
    #print(iy, ix)
    wavelengths = []
    rhos = []
    for var in list(NC_file.variables.keys()):
        # only interested in surface reflectance:
        if 'rhos' in var:
            wavelengths.append(float(var[5:]))
            rhos.append(NC_file.variables[var][iy, ix])
    
    df = pd.DataFrame(data={'Wavelength':wavelengths,
                     'Rho_s':rhos})
    return df


def get_SD_NC_Spectra_grid(NC_file, lat_pt, lon_pt, shape=(3, 3)):
    '''
    function to extract surface reflectance spectra from a superdoves NetCDF file at a given lat_pt, lon_pt coordinate
    gets values from several pixels in a grid (with shape = shape) around the chosen coord
    '''
    lat, lon = NC_file.variables['lat'][:], NC_file.variables['lon'][:]
    iy, ix = getclosest_ij(lat, lon, lat_pt, lon_pt)

    # get wavelengths data and create df for this
    wavelengths = []    
    for var in list(NC_file.variables.keys()):
        # only interested in surface reflectance:
        if 'rhos' in var:
            wavelengths.append(float(var[5:]))
            
    df1 = pd.DataFrame(data={'Wavelength':wavelengths})
                       
    # generate x and y coords for grid with shape=(shape[0], shape[1])
    x = np.linspace(ix - shape[0]//2,
                    ix + shape[0]//2 - (1 - shape[0]%2),
                    shape[0],
                    dtype=int)
    y = np.linspace(iy - shape[1]//2,
                    iy + shape[1]//2 - (1 - shape[1]%2),
                    shape[1],
                    dtype=int)
    rhos = []
    for i in x:
        for j in y:
            for var in list(NC_file.variables.keys()):
                # only interested in surface reflectance:
                if 'rhos' in var:
                    rhos.append(NC_file.variables[var][j, i])
            # might want to think about if I want to include the lat and lon of each pixel too?
            var_name = 'rho_s_' + str(i) + '_' + str(j)
            df2 = pd.DataFrame(data={var_name:rhos})
            df1 = pd.concat([df1, df2], axis=1)
            rhos = []
    return df1


def Plot_matchUp_SD_DALEC(DALEC_log, spect_wavelengths, RSR_doves, NC_file, lat_pt, lon_pt,
                          shape=(3, 3), ax=None, showPlot=False):
    '''
    does basic plot of DALEC data vs SD data
    '''
    SD_spect = get_SD_NC_Spectra_grid(NC_file, lat_pt, lon_pt, shape=shape)
    
    if ax is None:
        ax = plt.gca()
    # do plotting
    print('warning: this is gonna be super duper slow for lots of samples :)')
    for sample in DALEC_log.index.get_level_values('Sample #').unique():
        dalec_SD = spectralConv.SD_Rrs(RSR_doves,
                                       DALEC_log.loc[sample],
                                       spect_wavelengths)
        ax.plot(dalec_SD['Wavelength'],
                 dalec_SD['Rrs'],
                 marker='o',
                 alpha=0.2,
                 color='blue',
                 label='DALEC')

    for col in list(SD_spect.columns.values)[1:]:
        ax.plot(SD_spect['Wavelength'],
                 SD_spect[col]/np.pi,
                 color='red',
                 label='SuperDoves Acolite',
                 marker='o',
                 alpha=0.2)

    plt.rc('axes', labelsize=14) #fontsize of the x and y labels
    plt.rc('legend', fontsize=14) #fontsize of the legend

    # this code removes duplicate labels in the legend. thanks stackoverflow!
    handles, labels = ax.get_legend_handles_labels()
    newLabels, newHandles = [], []
    for handle, label in zip(handles, labels):
        if label not in newLabels:
            newLabels.append(label)
            newHandles.append(handle)
    ax.legend(newHandles, newLabels)

    ax.set_xlabel('Wavelength (nm)')
    ax.set_ylabel('$R_{rs}$ $(sr^{-1}$)')
    ax.grid()
    if showPlot:
        plt.show()